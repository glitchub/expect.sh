Expect functionality for bash.

expect.sh is a bash linkage to expect, providing functions to start arbitrary CLI programs in the
background, send strings to their standard input, and inspect their standard output for various
patterns.

Add "source path/to/expect.sh" at the top of your script to define the following:

-------------------------------

exp_spawn [options] [--] program [args...]

    Start the specified program in background and store its "handle" string in the $exp_spawnid
    variable.  Multiple programs can be spawned and interacted with at once, if you keep track of
    their spawnids.

    Options:

        -n N    :  Size of the longest anticipated match in bytes, default is 1000. Setting this to
        very large values can significantly slow pattern matching.

        --      :  End of options, required if the program's name starts with "-".

-------------------------------

exp_close [options]

    Terminate a spawned program.

    Return true on success, or false on invalid spawnid or similar error. Closing the current
    $exp_spawnid causes it to be reset to "tty".

    Spawned programs are closed automatically when the script exits, so this is really only
    necessary for scripts with long lifetimes.

    Options:

        -i spawnid  : spawnid to close, instead of $exp_spawnid.

-------------------------------

exp_send [options] [--] [string]

    Send the specified string to a spawned program's stdin. Character escapes such as "\n", "\xNN",
    "\uNNNN" etc, are converted to the actual characters.

    If no string is specified, read stdin into memory and send it verbatim. Note very large stdin
    should be avoided.

    These statements are equivalent:

        exp_send "line one\nline two\n"

    and:

        exp_send <<EOT
line one
line two
EOT

    Return true on success, or false on invalid spawnid or similar expect error.

    Options:

        -b string   : the string is base64-encoded, decode and send to the spawned program.
        Required for binary data or important whitespace that bash can't handle directly (pipe
        through "base64 -w0" to generate).

        -d seconds  : delay specified seconds between each character, typically used with a small
        decimal such as "-d 0.05".

        -f          : flush spawned program's output before sending

        -i spawnid  : spawnid to send to. Default is to send to $exp_spawnid. Specify "tty" to send
        to the current /dev/tty device monitorch may or may not be attached to bash stdout).

        --          : End of options, required if the string to be sent starts with "-".

-------------------------------

exp_expect [options] [--] [regex [...regex]]

    Given some number of regular expressions, monitor one or more spawned program's output buffers
    until a match is found or a timeout occurs.

    On a match:

        $exp_index is set to to the 0-based index of the matching regex argument

        Array element ${exp_match[0]} is set to the matching string

        Array elements ${exp_match[1]}, ${exp_match[2]}, etc are set the the values of regex
        sub-matches, if any

        $exp_matchid is set to the spawnid of the spawned program that generated the matching
        output, if more than one is being monitored

        exp_expect returns 0

    If multiple regexes match on the same final character, the one with the lowest index "wins".

    The matching text is removed from the buffer, leaving the remainder for the next exp_expect.

    If no regexes are specified, the default is ".+" which matches the entire buffer, or waits for
    the buffer to contain something.

    If the -i option (see below) can be specified multiple times and the output of all associated
    spawned programs monitored. On a match, $exp_matchid is set to the spawnid from which the
    matching text was received. In this case $exp_spawnid must be named explicitly to be included.

    Return true on success, or false on error and $exp_index is set to one of:

        -1 : Timeout, no match occurred within the specified time. The buffer is not altered.

        -2 : EOF, a spawned program has terminated, its spawnid is stored in $exp_matchid.  The
        spawnid is thereafter invalid and subsequent use will cause an error.

        -3 : invalid spawnid or similar expect error.

    tcl regex syntax is supported, see https://www.tcl.tk/man/tcl8.6/TclCmd/re_syntax.html for more
    information. By default, ^ and $ match the beginning and end of the buffer and a match may cross
    multiple lines but notably if the regex starts with "(?n)" then it is constrained to discrete
    lines and works more like grep.

    Options:

        -b          : base64-encode the strings in $exp_match[]. Required for binary data or
        important whitespace that bash can't handle directly (pass through "base64 -d" to recover).

        -i spawnid  : spawnid to monitor, instead of the default $exp_spawnid. Specify "tty" to
        monitor the current /dev/tty device (which may or may not be attached to bash stdin). -i can
        be specified multiple times to monitor multiple programs at once ($exp_spawnid must be named
        explicitly if it is to be included in this case).

        -t N        : seconds to wait for a match, default 2. If 0 just return whatever is currently
        in the buffer, if anything (and the buffer is cleared).

        --          : End of options, required if the first regex starts with "-".

-------------------------------

exp_internal [on|off]

    If "on" is specified, output lots of send/match debug information to stderr, which can be used
    to figure out why regexes aren't matching. If "off" (or anything else), disable the output.

-------------------------------

exp_log [options] [on|off|file]

    If "on" is specified, print output of spawned processes seen by exp_expect to stderr. If "off"
    or no argument, logging is disabled. Any other string is treated as a filename, log to that
    file.

    Options:

        -a          : append existing file (if a file is specified()

-------------------------------

Each of these functions correlates to an expect function of the same name, although with very
different syntax. The expect man page may provide more detailed information.

All functions return false for a functional error such as an closed spawnid, and in some cases there
may be an explanatory message on stderr. Procedural errors, such as use of an invalid parameter, are
fatal and force program exit with status 127. This will also happen if the expect coprocess
terminates for some reason.

Several private functions and variables are defined, their names all start with "_exp_".

expect.sh and related files in http://github.com/glitchub/expect.sh are released by the author into
the public domain.
